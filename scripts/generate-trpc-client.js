const fs = require('fs');
const path = require('path');

/**
 * This script generates a TRPC client file with typed hooks for each procedure
 * in the AppRouter. This provides full type safety for the client code.
 */

// Configuration
const outputPath = path.join(__dirname, '../utils/generated-hooks.ts');
const routerPath = path.resolve(__dirname, '../server/src/router.ts');

const generateTRPCClient = () => {
  // First, let's read the router file to understand its structure
  const routerContent = fs.readFileSync(routerPath, 'utf-8');
  
  // Extract all the router imports
  const routerImportRegex = /import\s+{\s*(.*?)Router\s*}\s*from\s*['"](.+?)['"];/g;
  const routerImports = [];
  let match;
  
  while ((match = routerImportRegex.exec(routerContent)) !== null) {
    routerImports.push({
      name: match[1],
      path: match[2]
    });
  }
  
  // Extract the router registrations from appRouter
  const routerRegistrationRegex = /(\w+)\s*:\s*(\w+)Router,/g;
  const routerRegistrations = [];
  
  while ((match = routerRegistrationRegex.exec(routerContent)) !== null) {
    routerRegistrations.push({
      key: match[1],
      name: match[2]
    });
  }
  
  // Generate the type-safe hooks file
  const hookFileContent = `/**
 * GENERATED FILE - DO NOT EDIT
 * This file is automatically generated by the generate-trpc-client script.
 * To update this file, run: npm run generate-hooks
 */

import { trpc } from './trpc';
import { RouterInputs, RouterOutputs } from '../server/src/types/trpc-types';

/**
 * Type-safe hooks for TRPC procedures
 */

${routerRegistrations.map(router => {
  return `// ${router.key} hooks
export const use${capitalizeFirstLetter(router.key)} = {
  // Add strongly typed hooks here
};
`;
}).join('\n')}

// Example type usage
type GreetingOutput = RouterOutputs['greeting']['hello'];
`;

  // Write the generated file
  fs.writeFileSync(outputPath, hookFileContent);
  console.log(`âœ… Generated TRPC client hooks at ${outputPath}`);
};

// Helper function to capitalize the first letter
function capitalizeFirstLetter(string) {
  return string.charAt(0).toUpperCase() + string.slice(1);
}

// Run the generator
generateTRPCClient(); 