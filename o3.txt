Debug Report - 2025-04-30T02:39:05.474Z
Generated by gather_debug_info.js
Focusing on files related to the runtime errors.

========================================
FILE: app/(tabs)/compass/index.tsx
ISSUE CONTEXT: Main compass screen that renders PrinciplesTab
----------------------------------------

// Compass screen with Principles and States tabs
import React, { useState } from 'react';
import { YStack, XStack, Text, Tabs, Button, ScrollView } from 'tamagui'; 
import { SafeAreaView } from 'react-native';
import { Ionicons } from '@expo/vector-icons';
import { trpc, type RouterOutputs } from '@/utils/trpc'; 
import { useColorScheme } from '@/hooks/useColorScheme'; 
import { EmptyOrSkeleton } from '@/components/ui/EmptyOrSkeleton';
import { router, type Href } from 'expo-router'; 
import { PrincipleCard } from '@/components/compass/PrincipleCard'; 
import { StateDefinitionCard } from '@/components/compass/StateDefinitionCard'; 

interface TabData {
  key: string;
  title: string;
  icon: React.ReactNode;
}

// Tab configurations
const TABS: TabData[] = [
  {
    key: 'principles',
    title: 'Principles',
    icon: <Ionicons name="compass-outline" size={18} color="currentColor" />
  },
  {
    key: 'states',
    title: 'States',
    icon: <Ionicons name="pulse-outline" size={18} color="currentColor" />
  }
];

export default function CompassScreen() {
  const [activeTab, setActiveTab] = useState<string>('principles');
  const colorScheme = useColorScheme();

  const handleAddPress = () => {
    const route = `/compose?type=${activeTab === 'principles' ? 'value' : 'state'}` as Href;
    router.push(route);
  };

  return (
    <SafeAreaView style={{ flex: 1, backgroundColor: colorScheme === 'dark' ? '#000' : '#fff' }}>
      <YStack flex={1} padding="$4">
        {/* Header */}
        <XStack justifyContent="space-between" alignItems="center" marginBottom="$4">
          <Text fontSize={24} fontWeight="bold">Compass</Text>
          <Button
            size="$3"
            circular
            onPress={handleAddPress} 
            icon={<Ionicons name="add" size={22} color={colorScheme === 'dark' ? '#fff' : '#000'} />}
          />
        </XStack>

        {/* Tabs */}
        <Tabs
          defaultValue="principles"
          orientation="horizontal"
          flexDirection="column"
          flex={1}
          value={activeTab}
          onValueChange={setActiveTab}
        >
          <Tabs.List
            backgroundColor="$backgroundStrong"
            paddingHorizontal="$2"
            borderRadius="$4"
            marginBottom="$4"
          >
            {TABS.map((tab) => (
              <Tabs.Tab
                key={tab.key}
                flex={1}
                value={tab.key}
                padding="$3"
                borderRadius="$2"
                backgroundColor={activeTab === tab.key ? '$backgroundFocus' : 'transparent'}
              >
                <XStack space="$2" justifyContent="center" alignItems="center">
                  {React.cloneElement(tab.icon as React.ReactElement, { color: activeTab === tab.key ? '$colorFocus' : '$color' })}
                  <Text color={activeTab === tab.key ? '$colorFocus' : '$color'}>{tab.title}</Text>
                </XStack>
              </Tabs.Tab>
            ))}
          </Tabs.List>

          {/* Tab Content */}
          <Tabs.Content value="principles" flex={1} key="principles-content">
            <ScrollView>
              <PrinciplesTab />
            </ScrollView>
          </Tabs.Content>

          <Tabs.Content value="states" flex={1} key="states-content">
            <ScrollView>
              <StatesTab />
            </ScrollView>
          </Tabs.Content>
        </Tabs>
      </YStack>
    </SafeAreaView>
  );
}

// Define the specific types from RouterOutputs
type Principle = RouterOutputs['value']['getValues'][number];
type StateDefinition = RouterOutputs['state']['getDefinitions'][number]; 

// Principles Tab Component (manages data fetching and list rendering)
function PrinciplesTab() {
  const { data: principles, isLoading, error, refetch } = trpc.value.getValues.useQuery();

  if (isLoading) {
    return <EmptyOrSkeleton isLoading={true} count={3} type="card" />;
  }

  if (error) {
    return (
      <EmptyOrSkeleton
        isEmpty={false}
        isError={true}
        onRetry={refetch}
        text="Failed to load principles"
      />
    );
  }

  if (!principles || principles.length === 0) {
    return (
      <EmptyOrSkeleton
        isEmpty={true}
        text="No principles defined yet"
        actionText="Add Your First Principle"
        onAction={() => router.push('/compose?type=value' as Href)}
      />
    );
  }

  return (
    <YStack space="$3"> 
      {principles.map((principle: Principle) => (
        <PrincipleCard
          key={principle.id}
          principle={principle}
          onPress={() => router.push(`/values/${principle.id}` as Href)}
        />
      ))}
    </YStack>
  );
}

// States Tab Component (manages data fetching and list rendering)
function StatesTab() {
  const { data: states, isLoading, error, refetch } = trpc.state.getDefinitions.useQuery(); 

  if (isLoading) {
    return <EmptyOrSkeleton isLoading={true} count={3} type="card" />;
  }

  if (error) {
    return (
      <EmptyOrSkeleton
        isEmpty={false}
        isError={true}
        onRetry={refetch}
        text="Failed to load tracked state definitions"
      />
    );
  }

  if (!states || states.length === 0) {
    return (
      <EmptyOrSkeleton
        isEmpty={true}
        text="No state definitions found"
        actionText="Define Your First State"
        onAction={() => router.push('/compose?type=state' as Href)}
      />
    );
  }

  return (
    <YStack space="$3"> 
      {states.map((state: StateDefinition) => (
        <StateDefinitionCard
          key={state.id}
          state={state}
          onPress={() => router.push(`/states/${state.id}` as Href)}
        />
      ))}
    </YStack>
  );
}

// 
// Removed inline PrincipleCard definition (extracted to components/compass/PrincipleCard.tsx)
// 

// 
// Removed inline StateDefinitionCard definition (extracted to components/compass/StateDefinitionCard.tsx)
// 


[EOF: app/(tabs)/compass/index.tsx]

========================================
FILE: components/compass/PrinciplesTab.tsx
ISSUE CONTEXT: TypeError: principles.map is not a function (it is undefined)
----------------------------------------

Error: File not found at /Users/tylerbedford/Documents/Coding Projects/AetherIphone/components/compass/PrinciplesTab.tsx
This missing file could be related to the routing or component errors.


[EOF: components/compass/PrinciplesTab.tsx]

========================================
FILE: app/(tabs)/rewards/index.tsx
ISSUE CONTEXT: Duplicate Key Warning: "Encountered two children with the same key, `.$undefined-grid=2undefined-grid`"
----------------------------------------

// Rewards screen with grid/list toggle and claim functionality
import React, { useState, useCallback } from 'react';
import { YStack, XStack, Text, Button, ScrollView, Card, Checkbox, useTheme, H1 } from 'tamagui';
import { SafeAreaView, View, FlatList, ImageBackground, Alert } from 'react-native';
import { Ionicons } from '@expo/vector-icons';
import { trpc } from '@/utils/trpc';
import { useColorScheme } from '@/hooks/useColorScheme';
import { RouterOutputs } from '@/utils/trpc'; // Import RouterOutputs
import { EmptyOrSkeleton } from '@/components/ui/EmptyOrSkeleton'; // Import helper component

// Define inferred type for rewards
type RewardItem = RouterOutputs['rewards']['getAvailableRewards'][number];

enum ViewMode {
  Grid = 'grid',
  List = 'list'
}

export default function RewardsScreen() {
  const [viewMode, setViewMode] = useState<ViewMode>(ViewMode.Grid);
  const colorScheme = useColorScheme();
  const theme = useTheme();

  // Define fallback colors
  const blue2 = theme?.blue2?.val ?? '#eff6ff';
  const blue5 = theme?.blue5?.val ?? '#60a5fa';
  const blue10 = theme?.blue10?.val ?? '#1e40af';
  const blue11 = theme?.blue11?.val ?? '#1e3a8a';
  const green9 = theme?.green9?.val ?? '#16a34a';

  // Fetch available rewards from tRPC
  const { 
    data: rewards, 
    isLoading, 
    error, 
    refetch 
  } = trpc.rewards.getAvailableRewards.useQuery();

  // Mutation for claiming rewards
  const claimMutation = trpc.rewards.earnReward.useMutation({
    onSuccess: (data) => {
      console.log('Reward claimed successfully:', data);
      // Maybe show confetti?
      Alert.alert('Reward Claimed!', `You spent ${data.reward.points_spent} points. Remaining: ${data.remainingPoints}`);
      refetch(); // Refetch the list of available rewards
    },
    onError: (err) => {
      console.error('Failed to claim reward:', err);
      Alert.alert('Claim Failed', err.message || 'Could not claim reward.');
    }
  });
  
  const handleClaimReward = useCallback((rewardId: string) => {
    if (claimMutation.isPending) return; // Prevent double-clicks
    
    Alert.alert(
      'Confirm Claim',
      'Are you sure you want to spend points on this reward?',
      [
        { text: 'Cancel', style: 'cancel' },
        { 
          text: 'Claim', 
          onPress: () => {
            claimMutation.mutate({ rewardId });
          },
          style: 'default'
        }
      ]
    );
  }, [claimMutation]);
  
  const renderItem = ({ item }: { item: RewardItem }) => { // Use inferred type
    // Assuming backend field is image_url, map to imagePath
    const imagePath = item.image_url; 
    // All items from getAvailableRewards are considered claimable (not yet claimed)
    const claimed = false; 
    // Map required_points to pointCost
    const pointCost = item.required_points;

    if (viewMode === ViewMode.Grid) {
      return (
        <Card
          size="$4"
          bordered
          width={160}
          height={200}
          margin="$2"
          overflow="hidden"
          elevation="$2"
          opacity={claimed ? 0.7 : 1}
        >
          <ImageBackground
            source={{ uri: imagePath }}
            style={{ width: '100%', height: 100 }}
          >
            <View style={{ 
              position: 'absolute', 
              top: 5, 
              right: 5, 
              backgroundColor: blue5,
              borderRadius: 10,
              padding: 4
            }}>
              <Text color="white" fontSize="$2" fontWeight="bold">
                {pointCost} pts
              </Text>
            </View>
          </ImageBackground>
          
          <YStack padding="$2" flex={1} justifyContent="space-between">
            <Text fontSize="$4" fontWeight="bold" numberOfLines={1}>
              {item.name}
            </Text>
            
            <Button
              size="$2"
              themeInverse={claimed}
              backgroundColor={claimed ? undefined : blue10}
              onPress={() => handleClaimReward(item.id)}
              disabled={claimed || claimMutation.isPending} // Disable if claimed or mutation pending
            >
              {claimMutation.isPending && claimMutation.variables?.rewardId === item.id ? 'Claiming...' : (claimed ? 'Claimed' : 'Claim')}
            </Button>
          </YStack>
        </Card>
      );
    } else {
      return (
        <Card
          bordered
          margin="$2"
          padding="$3"
          opacity={claimed ? 0.7 : 1}
        >
          <XStack space="$3" alignItems="center">
            {imagePath && (
              <View style={{ 
                width: 60, 
                height: 60, 
                borderRadius: 8, 
                overflow: 'hidden',
                backgroundColor: theme.gray3.val
              }}>
                <ImageBackground
                  source={{ uri: imagePath }}
                  style={{ width: '100%', height: '100%' }}
                />
              </View>
            )}
            
            <YStack flex={1} space="$1">
              <Text fontSize="$5" fontWeight="bold">{item.name}</Text>
              <Text fontSize="$3" color="$gray11" numberOfLines={2}>{item.description}</Text>
              <Text fontSize="$3" color={blue10} fontWeight="500">{pointCost} points</Text>
            </YStack>
            
            <Button
              size="$3"
              backgroundColor={claimed ? undefined : blue10}
              themeInverse={claimed}
              onPress={() => handleClaimReward(item.id)}
              disabled={claimed || claimMutation.isPending} // Disable if claimed or mutation pending
            >
              {claimMutation.isPending && claimMutation.variables?.rewardId === item.id ? 'Claiming...' : (claimed ? 'Claimed' : 'Claim')}
            </Button>
          </XStack>
        </Card>
      );
    }
  };
  
  return (
    <SafeAreaView style={{ flex: 1, backgroundColor: colorScheme === 'dark' ? '#000' : '#fff' }}>
      <YStack flex={1} padding="$4">
        <YStack space="$4">
          {/* Header */}
          <XStack justifyContent="space-between" alignItems="center">
            <H1>Rewards</H1>
            
            <XStack space="$2">
              <Button
                chromeless
                circular
                padding="$2"
                backgroundColor={viewMode === ViewMode.Grid ? blue5 : 'transparent'}
                onPress={() => setViewMode(ViewMode.Grid)}
              >
                <Ionicons 
                  name="grid-outline" 
                  size={22} 
                  color={viewMode === ViewMode.Grid ? blue10 : (colorScheme === 'dark' ? '#fff' : '#000')} 
                />
              </Button>
              
              <Button
                chromeless
                circular
                padding="$2"
                backgroundColor={viewMode === ViewMode.List ? blue5 : 'transparent'}
                onPress={() => setViewMode(ViewMode.List)}
              >
                <Ionicons 
                  name="list-outline" 
                  size={22} 
                  color={viewMode === ViewMode.List ? blue10 : (colorScheme === 'dark' ? '#fff' : '#000')} 
                />
              </Button>
            </XStack>
          </XStack>
          
          {/* Stats */}
          <Card padding="$3" backgroundColor={blue2}>
            <XStack justifyContent="space-between" alignItems="center">
              <Text fontSize="$5" fontWeight="bold" color={blue11}>Your Points</Text>
              <Text fontSize="$6" fontWeight="bold" color={blue10}>275</Text>
            </XStack>
          </Card>
        </YStack>
        
        {/* Content Area */} 
        <EmptyOrSkeleton 
          isLoading={isLoading}
          isEmpty={!isLoading && (!rewards || rewards.length === 0)}
          isError={!!error}
          text={error ? error.message : 'No rewards available yet.'} // Use text for error OR empty msg
          onRetry={refetch}
          type={viewMode === ViewMode.Grid ? 'card' : 'row'}
          count={viewMode === ViewMode.Grid ? 6 : 3}
        >
          <FlatList
            key={viewMode} // Change key based on viewMode to force re-render
            data={rewards}
            renderItem={renderItem}
            keyExtractor={(item) => `${item.id}-${viewMode}`} // Apply patch #1
            numColumns={viewMode === ViewMode.Grid ? 2 : 1}
            contentContainerStyle={{ paddingBottom: 50 }} // Add padding at the bottom
            // Optional Optimizations (Patch #6)
            initialNumToRender={8}
            removeClippedSubviews={true} // Note: Can have visual glitches on iOS sometimes
          />
        </EmptyOrSkeleton>

      </YStack>
    </SafeAreaView>
  );
}


[EOF: app/(tabs)/rewards/index.tsx]

========================================
FILE: app/(tabs)/_layout.tsx
ISSUE CONTEXT: Warnings: "No route named planner/index & settings/index exists in nested children"
----------------------------------------

// File: /Users/tylerbedford/Documents/Coding Projects/AetherIphone/app/(tabs)/_layout.tsx
import React from 'react';
import { Tabs } from 'expo-router';
import { Ionicons } from '@expo/vector-icons'; // Example icon library
import { useThemeColor } from '@/hooks/useThemeColor'; // Assuming path alias is set

export default function TabLayout() {
  const tabBarActiveTintColor = useThemeColor({}, 'tabIconSelected');
  const tabBarInactiveTintColor = useThemeColor({}, 'tabIconDefault');
  const backgroundColor = useThemeColor({}, 'background'); // Use standard background color

  return (
    <Tabs
      screenOptions={{
        tabBarActiveTintColor: tabBarActiveTintColor,
        tabBarInactiveTintColor: tabBarInactiveTintColor,
        tabBarStyle: {
          backgroundColor: backgroundColor,
          // Add other styles like borderTopColor if needed
        },
        headerShown: false, // We might handle headers inside each screen or using Stack
      }}
    >
      <Tabs.Screen
        name="home/index"
        options={{
          title: 'Home',
          tabBarIcon: ({ color, size }) => (
            <Ionicons name="home-outline" size={size} color={color} />
          ),
        }}
      />
      <Tabs.Screen
        name="planner/index"
        options={{
          title: 'Planner',
          tabBarIcon: ({ color, size }) => (
            <Ionicons name="calendar-outline" size={size} color={color} />
          ),
        }}
      />
      <Tabs.Screen
        name="compass/index"
        options={{
          title: 'Compass',
          tabBarIcon: ({ color, size }) => (
            <Ionicons name="compass-outline" size={size} color={color} />
          ),
        }}
      />
      <Tabs.Screen
        name="rewards/index"
        options={{
          title: 'Rewards',
          tabBarIcon: ({ color, size }) => (
            <Ionicons name="gift-outline" size={size} color={color} />
          ),
        }}
      />
      <Tabs.Screen
        name="settings/index"
        options={{
          title: 'Settings',
          tabBarIcon: ({ color, size }) => (
            <Ionicons name="settings-outline" size={size} color={color} />
          ),
        }}
      />
    </Tabs>
  );
}


[EOF: app/(tabs)/_layout.tsx]

========================================
FILE: app/(tabs)/planner/index.tsx
ISSUE CONTEXT: Possibly missing or index file needs to be created
----------------------------------------

// File: /Users/tylerbedford/Documents/Coding Projects/AetherIphone/app/(tabs)/planner/index.tsx
import React, { useState, Suspense } from 'react';
import { YStack, XStack, Text, Tabs, Button, Spinner, Card } from 'tamagui';
import { SafeAreaView, FlatList, RefreshControl } from 'react-native';
import { Ionicons } from '@expo/vector-icons';
import { router } from 'expo-router';
import { trpc } from '@/utils/trpc';
import { useColorScheme } from '@/hooks/useColorScheme';
import { EmptyOrSkeleton } from '@/components/ui/EmptyOrSkeleton';
import { RouterOutputs } from '@/utils/api-types';
import { SectionError } from '@/components/ui/ErrorBanner';


interface TabData {
  key: string;
  title: string;
  icon: React.ReactNode;
}

// Tab configurations
const TABS: TabData[] = [
  {
    key: 'goals',
    title: 'Goals',
    icon: <Ionicons name="trophy-outline" size={18} color="currentColor" />
  },
  {
    key: 'habits',
    title: 'Habits',
    icon: <Ionicons name="repeat-outline" size={18} color="currentColor" />
  },
  {
    key: 'calendar',
    title: 'Calendar',
    icon: <Ionicons name="calendar-outline" size={18} color="currentColor" />
  }
];

export default function PlannerScreen() {
  const [activeTab, setActiveTab] = useState<string>('goals');
  const colorScheme = useColorScheme();
  
  return (
    <SafeAreaView style={{ flex: 1, backgroundColor: colorScheme === 'dark' ? '#000' : '#fff' }}>
      <YStack flex={1} padding="$4">
        {/* Header */}
        <XStack justifyContent="space-between" alignItems="center" marginBottom="$4">
          <Text fontSize={24} fontWeight="bold">Planner</Text>
          <Button
            size="$3"
            circular
            onPress={() => {/* Handle new item */}}
            icon={<Ionicons name="add" size={22} color={colorScheme === 'dark' ? '#fff' : '#000'} />}
          />
        </XStack>
        
        {/* Tabs */}
        <Tabs
          defaultValue="goals"
          orientation="horizontal"
          flexDirection="column"
          flex={1}
          value={activeTab}
          onValueChange={setActiveTab}
        >
          <Tabs.List 
            backgroundColor="$backgroundStrong"
            paddingHorizontal="$2"
            borderRadius="$4"
            marginBottom="$4"
          >
            {TABS.map((tab) => (
              <Tabs.Tab
                key={tab.key}
                flex={1}
                value={tab.key}
                padding="$3"
                borderRadius="$2"
                backgroundColor={activeTab === tab.key ? '$backgroundFocus' : 'transparent'}
              >
                <XStack space="$2" justifyContent="center" alignItems="center">
                  {tab.icon}
                  <Text>{tab.title}</Text>
                </XStack>
              </Tabs.Tab>
            ))}
          </Tabs.List>
          
          {/* Tab Content */}
          <Tabs.Content value="goals" flex={1}>
            <ScrollView>
              <GoalsTab />
            </ScrollView>
          </Tabs.Content>
          
          <Tabs.Content value="habits" flex={1}>
            <ScrollView>
              <HabitsTab />
            </ScrollView>
          </Tabs.Content>
          
          <Tabs.Content value="calendar" flex={1}>
            <ScrollView>
              <CalendarTab />
            </ScrollView>
          </Tabs.Content>
        </Tabs>
      </YStack>
    </SafeAreaView>
  );
}

// Goals Tab
function GoalsTab() {
  // Fetch goals using tRPC
  const { data: goals, isLoading, error, refetch } = trpc.goal.getGoals.useQuery();
  
  // Define the inferred type for a single goal
  type PlannerGoal = RouterOutputs['goal']['getGoals'][number];

  if (isLoading) {
    return <EmptyOrSkeleton isLoading={true} count={3} type="card" />;
  }
  
  if (error) {
    return (
      <EmptyOrSkeleton 
        isEmpty={false} 
        isError={true} 
        onRetry={refetch} 
        text="Failed to load goals" 
      />
    );
  }
  
  if (!goals || goals.length === 0) {
    return (
      <EmptyOrSkeleton 
        isEmpty={true} 
        text="No goals yet" 
        actionText="Create a goal" 
        onAction={() => router.push('/planner/add-goal')} 
      />
    );
  }
  
  return (
    <YStack space="$4">
      {goals.map((goal: PlannerGoal) => (
        <Button 
          key={goal.id} 
          height="$12" 
          justifyContent="flex-start" 
          paddingHorizontal="$3"
          onPress={() => router.push({ pathname: '/planner/goal/[id]', params: { id: goal.id } })}
        >
          <YStack>
            <Text fontWeight="bold">{goal.title}</Text>
            <Text fontSize="$2" color="$gray10">
              {goal.dueDate ? new Date(goal.dueDate).toLocaleDateString() : 'No due date'}
            </Text>
          </YStack>
        </Button>
      ))}
    </YStack>
  );
}

// Habits Tab
function HabitsTab() {
  // Fetch habits using tRPC
  const { data: habits, isLoading, error, refetch } = trpc.habit.getHabits.useQuery();
  
  // Define the inferred type for a single habit
  type PlannerHabit = RouterOutputs['habit']['getHabits'][number];

  if (isLoading) {
    return <EmptyOrSkeleton isLoading={isLoading} count={3} type="row" />;
  }
  
  if (error) {
    return (
      <EmptyOrSkeleton 
        isEmpty={false} 
        isError={true} 
        onRetry={refetch} 
        text="Failed to load habits" 
      />
    );
  }
  
  if (!habits || habits.length === 0) {
    return (
      <EmptyOrSkeleton 
        isEmpty={true} 
        text="No habits yet" 
        actionText="Create a habit" 
        onAction={() => router.push('/planner/add-habit')} 
      />
    );
  }
  
  return (
    <YStack space="$3">
      {habits.map((habit: PlannerHabit) => (
        <XStack 
          key={habit.id} 
          justifyContent="space-between" 
          alignItems="center" 
          paddingVertical="$3" 
          paddingHorizontal="$3" 
          borderBottomWidth={1} 
          borderColor="$gray5"
          pressStyle={{ opacity: 0.7 }}
          tag="pressable"
          onPress={() => router.push({ pathname: '/planner/habit/[id]', params: { id: habit.id } })}
        >
          <Text>{habit.title}</Text>
          <Button
            size="$2"
            circular
            backgroundColor={habit.completed ? '$green9' : '$gray9'}
            onPress={() => {
              // Use today's date for the habit entry
              const today = new Date().toISOString().split('T')[0];
              
              // Create a mutation to toggle habit completion
              const toggleHabit = trpc.habit.createHabitEntry.useMutation({
                onSuccess: () => {
                  refetch(); // Refresh data after toggling
                },
                onError: (error) => {
                  // Show error message
                  console.error('Failed to toggle habit:', error.message);
                }
              });
              
              // Toggle the habit completion status
              toggleHabit.mutate({
                habitId: habit.id,
                completed: !habit.completed,
                date: today
              });
            }}
            icon={<Ionicons name="checkmark" size={18} color="white" />}
          />
        </XStack>
      ))}
    </YStack>
  );
}

// Calendar Tab
function CalendarTab() {
  return (
    <YStack alignItems="center" justifyContent="center" padding="$8">
      <Text fontSize="$5" textAlign="center">
        Calendar integration coming soon
      </Text>
      <Text marginTop="$2" color="$gray10" textAlign="center">
        This tab will display task and habit schedules in a calendar view
      </Text>
    </YStack>
  );
}


[EOF: app/(tabs)/planner/index.tsx]

========================================
FILE: app/(tabs)/settings/index.tsx
ISSUE CONTEXT: Possibly missing or index file needs to be created
----------------------------------------

// Settings screen with account, preferences, and app settings
import React, { useState } from 'react';
import { YStack, XStack, Text, Button, Switch, Separator, ScrollView, Card, H1 } from 'tamagui';
import { SafeAreaView, View, Alert } from 'react-native';
import { Ionicons } from '@expo/vector-icons';
import { router } from 'expo-router';
import { supabase } from '@/utils/supabase';
import { useColorScheme } from '@/hooks/useColorScheme';
import { useUiStore } from '@/stores/uiStore';

interface SettingsSectionProps {
  title: string;
  icon: React.ReactNode;
  children: React.ReactNode;
}

const SettingsSection = ({ title, icon, children }: SettingsSectionProps) => {
  return (
    <YStack marginVertical="$2">
      <XStack alignItems="center" space="$2" marginBottom="$2">
        {icon}
        <Text fontSize="$5" fontWeight="bold">{title}</Text>
      </XStack>
      <Card padding="$3" bordered>
        {children}
      </Card>
    </YStack>
  );
};

interface SettingsRowProps {
  label: string;
  icon?: React.ReactNode;
  rightElement?: React.ReactNode;
  onPress?: () => void;
  showChevron?: boolean;
}

const SettingsRow = ({ label, icon, rightElement, onPress, showChevron = false }: SettingsRowProps) => {
  return (
    <XStack
      paddingVertical="$3"
      justifyContent="space-between"
      alignItems="center"
      onPress={onPress}
      pressStyle={onPress ? { opacity: 0.7 } : undefined}
    >
      <XStack space="$3" alignItems="center" flex={1}>
        {icon}
        <Text fontSize="$4">{label}</Text>
      </XStack>
      <XStack space="$2" alignItems="center">
        {rightElement}
        {showChevron && <Ionicons name="chevron-forward" size={18} color="#A0A0A0" />}
      </XStack>
    </XStack>
  );
};

export default function SettingsScreen() {
  const colorScheme = useColorScheme();
  const { isDarkMode, toggleTheme } = useUiStore();
  const [notificationsEnabled, setNotificationsEnabled] = useState(true);
  const [trackingEnabled, setTrackingEnabled] = useState(true);
  
  const handleLogout = async () => {
    Alert.alert(
      'Log Out',
      'Are you sure you want to log out?',
      [
        { text: 'Cancel', style: 'cancel' },
        { 
          text: 'Log Out', 
          style: 'destructive',
          onPress: async () => {
            await supabase.auth.signOut();
            router.replace('/(auth)/login');
          }
        }
      ]
    );
  };
  
  return (
    <SafeAreaView style={{ flex: 1, backgroundColor: colorScheme === 'dark' ? '#000' : '#fff' }}>
      <ScrollView>
        <YStack flex={1} padding="$4">
          <H1 marginBottom="$4">Settings</H1>
          
          {/* Account Section */}
          <SettingsSection
            title="Account"
            icon={<Ionicons name="person-circle-outline" size={24} color={colorScheme === 'dark' ? '#fff' : '#000'} />}
          >
            <YStack>
              <SettingsRow
                label="Edit Profile"
                icon={<Ionicons name="person-outline" size={20} color="#A0A0A0" />}
                showChevron
                onPress={() => router.push('/settings/profile' as any)}
              />
              <Separator marginVertical="$1" />
              <SettingsRow
                label="Security"
                icon={<Ionicons name="lock-closed-outline" size={20} color="#A0A0A0" />}
                showChevron
                onPress={() => router.push('/settings/security' as any)}
              />
              <Separator marginVertical="$1" />
              <SettingsRow
                label="Data & Privacy"
                icon={<Ionicons name="shield-outline" size={20} color="#A0A0A0" />}
                showChevron
                onPress={() => router.push('/settings/privacy' as any)}
              />
            </YStack>
          </SettingsSection>
          
          {/* Appearance Section */}
          <SettingsSection
            title="Appearance"
            icon={<Ionicons name="color-palette-outline" size={24} color={colorScheme === 'dark' ? '#fff' : '#000'} />}
          >
            <YStack>
              <SettingsRow
                label="Dark Mode"
                icon={<Ionicons name="moon-outline" size={20} color="#A0A0A0" />}
                rightElement={
                  <Switch
                    size="$3"
                    checked={isDarkMode}
                    onCheckedChange={toggleTheme}
                  />
                }
              />
            </YStack>
          </SettingsSection>
          
          {/* Notifications Section */}
          <SettingsSection
            title="Notifications"
            icon={<Ionicons name="notifications-outline" size={24} color={colorScheme === 'dark' ? '#fff' : '#000'} />}
          >
            <YStack>
              <SettingsRow
                label="Push Notifications"
                icon={<Ionicons name="push-outline" size={20} color="#A0A0A0" />}
                rightElement={
                  <Switch
                    size="$3"
                    checked={notificationsEnabled}
                    onCheckedChange={setNotificationsEnabled}
                  />
                }
              />
              <Separator marginVertical="$1" />
              <SettingsRow
                label="Notification Settings"
                icon={<Ionicons name="options-outline" size={20} color="#A0A0A0" />}
                showChevron
                onPress={() => router.push('/settings/notifications' as any)}
              />
            </YStack>
          </SettingsSection>
          
          {/* Privacy Section */}
          <SettingsSection
            title="Privacy & Data"
            icon={<Ionicons name="analytics-outline" size={24} color={colorScheme === 'dark' ? '#fff' : '#000'} />}
          >
            <YStack>
              <SettingsRow
                label="Analytics Tracking"
                icon={<Ionicons name="trending-up-outline" size={20} color="#A0A0A0" />}
                rightElement={
                  <Switch
                    size="$3"
                    checked={trackingEnabled}
                    onCheckedChange={setTrackingEnabled}
                  />
                }
              />
              <Separator marginVertical="$1" />
              <SettingsRow
                label="Export Data"
                icon={<Ionicons name="download-outline" size={20} color="#A0A0A0" />}
                showChevron
                onPress={() => {
                  Alert.alert(
                    'Export Data',
                    'Your data will be prepared for export and sent to your email address.',
                    [
                      { text: 'Cancel', style: 'cancel' },
                      { text: 'Export', onPress: () => {
                        // Would call an API endpoint to initiate export
                        Alert.alert('Export Initiated', 'Check your email for the export file.');
                      }}
                    ]
                  );
                }}
              />
            </YStack>
          </SettingsSection>
          
          {/* Support Section */}
          <SettingsSection
            title="Support & About"
            icon={<Ionicons name="help-circle-outline" size={24} color={colorScheme === 'dark' ? '#fff' : '#000'} />}
          >
            <YStack>
              <SettingsRow
                label="Help Center"
                icon={<Ionicons name="help-outline" size={20} color="#A0A0A0" />}
                showChevron
                onPress={() => router.push('/settings/help' as any)}
              />
              <Separator marginVertical="$1" />
              <SettingsRow
                label="About Aether"
                icon={<Ionicons name="information-circle-outline" size={20} color="#A0A0A0" />}
                showChevron
                onPress={() => router.push('/settings/about' as any)}
              />
              <Separator marginVertical="$1" />
              <SettingsRow
                label="App Version"
                icon={<Ionicons name="code-outline" size={20} color="#A0A0A0" />}
                rightElement={<Text color="$gray10">1.0.0</Text>}
              />
            </YStack>
          </SettingsSection>
          
          {/* Logout Button */}
          <Button
            marginTop="$6"
            marginBottom="$8"
            size="$4"
            themeInverse
            onPress={handleLogout}
          >
            Log Out
          </Button>
        </YStack>
      </ScrollView>
    </SafeAreaView>
  );
}


[EOF: app/(tabs)/settings/index.tsx]

========================================
FILE: app/(tabs)/planner/index.tsx
ISSUE CONTEXT: ReferenceError: Property "ScrollView" doesn't exist
----------------------------------------

// File: /Users/tylerbedford/Documents/Coding Projects/AetherIphone/app/(tabs)/planner/index.tsx
import React, { useState, Suspense } from 'react';
import { YStack, XStack, Text, Tabs, Button, Spinner, Card } from 'tamagui';
import { SafeAreaView, FlatList, RefreshControl } from 'react-native';
import { Ionicons } from '@expo/vector-icons';
import { router } from 'expo-router';
import { trpc } from '@/utils/trpc';
import { useColorScheme } from '@/hooks/useColorScheme';
import { EmptyOrSkeleton } from '@/components/ui/EmptyOrSkeleton';
import { RouterOutputs } from '@/utils/api-types';
import { SectionError } from '@/components/ui/ErrorBanner';


interface TabData {
  key: string;
  title: string;
  icon: React.ReactNode;
}

// Tab configurations
const TABS: TabData[] = [
  {
    key: 'goals',
    title: 'Goals',
    icon: <Ionicons name="trophy-outline" size={18} color="currentColor" />
  },
  {
    key: 'habits',
    title: 'Habits',
    icon: <Ionicons name="repeat-outline" size={18} color="currentColor" />
  },
  {
    key: 'calendar',
    title: 'Calendar',
    icon: <Ionicons name="calendar-outline" size={18} color="currentColor" />
  }
];

export default function PlannerScreen() {
  const [activeTab, setActiveTab] = useState<string>('goals');
  const colorScheme = useColorScheme();
  
  return (
    <SafeAreaView style={{ flex: 1, backgroundColor: colorScheme === 'dark' ? '#000' : '#fff' }}>
      <YStack flex={1} padding="$4">
        {/* Header */}
        <XStack justifyContent="space-between" alignItems="center" marginBottom="$4">
          <Text fontSize={24} fontWeight="bold">Planner</Text>
          <Button
            size="$3"
            circular
            onPress={() => {/* Handle new item */}}
            icon={<Ionicons name="add" size={22} color={colorScheme === 'dark' ? '#fff' : '#000'} />}
          />
        </XStack>
        
        {/* Tabs */}
        <Tabs
          defaultValue="goals"
          orientation="horizontal"
          flexDirection="column"
          flex={1}
          value={activeTab}
          onValueChange={setActiveTab}
        >
          <Tabs.List 
            backgroundColor="$backgroundStrong"
            paddingHorizontal="$2"
            borderRadius="$4"
            marginBottom="$4"
          >
            {TABS.map((tab) => (
              <Tabs.Tab
                key={tab.key}
                flex={1}
                value={tab.key}
                padding="$3"
                borderRadius="$2"
                backgroundColor={activeTab === tab.key ? '$backgroundFocus' : 'transparent'}
              >
                <XStack space="$2" justifyContent="center" alignItems="center">
                  {tab.icon}
                  <Text>{tab.title}</Text>
                </XStack>
              </Tabs.Tab>
            ))}
          </Tabs.List>
          
          {/* Tab Content */}
          <Tabs.Content value="goals" flex={1}>
            <ScrollView>
              <GoalsTab />
            </ScrollView>
          </Tabs.Content>
          
          <Tabs.Content value="habits" flex={1}>
            <ScrollView>
              <HabitsTab />
            </ScrollView>
          </Tabs.Content>
          
          <Tabs.Content value="calendar" flex={1}>
            <ScrollView>
              <CalendarTab />
            </ScrollView>
          </Tabs.Content>
        </Tabs>
      </YStack>
    </SafeAreaView>
  );
}

// Goals Tab
function GoalsTab() {
  // Fetch goals using tRPC
  const { data: goals, isLoading, error, refetch } = trpc.goal.getGoals.useQuery();
  
  // Define the inferred type for a single goal
  type PlannerGoal = RouterOutputs['goal']['getGoals'][number];

  if (isLoading) {
    return <EmptyOrSkeleton isLoading={true} count={3} type="card" />;
  }
  
  if (error) {
    return (
      <EmptyOrSkeleton 
        isEmpty={false} 
        isError={true} 
        onRetry={refetch} 
        text="Failed to load goals" 
      />
    );
  }
  
  if (!goals || goals.length === 0) {
    return (
      <EmptyOrSkeleton 
        isEmpty={true} 
        text="No goals yet" 
        actionText="Create a goal" 
        onAction={() => router.push('/planner/add-goal')} 
      />
    );
  }
  
  return (
    <YStack space="$4">
      {goals.map((goal: PlannerGoal) => (
        <Button 
          key={goal.id} 
          height="$12" 
          justifyContent="flex-start" 
          paddingHorizontal="$3"
          onPress={() => router.push({ pathname: '/planner/goal/[id]', params: { id: goal.id } })}
        >
          <YStack>
            <Text fontWeight="bold">{goal.title}</Text>
            <Text fontSize="$2" color="$gray10">
              {goal.dueDate ? new Date(goal.dueDate).toLocaleDateString() : 'No due date'}
            </Text>
          </YStack>
        </Button>
      ))}
    </YStack>
  );
}

// Habits Tab
function HabitsTab() {
  // Fetch habits using tRPC
  const { data: habits, isLoading, error, refetch } = trpc.habit.getHabits.useQuery();
  
  // Define the inferred type for a single habit
  type PlannerHabit = RouterOutputs['habit']['getHabits'][number];

  if (isLoading) {
    return <EmptyOrSkeleton isLoading={isLoading} count={3} type="row" />;
  }
  
  if (error) {
    return (
      <EmptyOrSkeleton 
        isEmpty={false} 
        isError={true} 
        onRetry={refetch} 
        text="Failed to load habits" 
      />
    );
  }
  
  if (!habits || habits.length === 0) {
    return (
      <EmptyOrSkeleton 
        isEmpty={true} 
        text="No habits yet" 
        actionText="Create a habit" 
        onAction={() => router.push('/planner/add-habit')} 
      />
    );
  }
  
  return (
    <YStack space="$3">
      {habits.map((habit: PlannerHabit) => (
        <XStack 
          key={habit.id} 
          justifyContent="space-between" 
          alignItems="center" 
          paddingVertical="$3" 
          paddingHorizontal="$3" 
          borderBottomWidth={1} 
          borderColor="$gray5"
          pressStyle={{ opacity: 0.7 }}
          tag="pressable"
          onPress={() => router.push({ pathname: '/planner/habit/[id]', params: { id: habit.id } })}
        >
          <Text>{habit.title}</Text>
          <Button
            size="$2"
            circular
            backgroundColor={habit.completed ? '$green9' : '$gray9'}
            onPress={() => {
              // Use today's date for the habit entry
              const today = new Date().toISOString().split('T')[0];
              
              // Create a mutation to toggle habit completion
              const toggleHabit = trpc.habit.createHabitEntry.useMutation({
                onSuccess: () => {
                  refetch(); // Refresh data after toggling
                },
                onError: (error) => {
                  // Show error message
                  console.error('Failed to toggle habit:', error.message);
                }
              });
              
              // Toggle the habit completion status
              toggleHabit.mutate({
                habitId: habit.id,
                completed: !habit.completed,
                date: today
              });
            }}
            icon={<Ionicons name="checkmark" size={18} color="white" />}
          />
        </XStack>
      ))}
    </YStack>
  );
}

// Calendar Tab
function CalendarTab() {
  return (
    <YStack alignItems="center" justifyContent="center" padding="$8">
      <Text fontSize="$5" textAlign="center">
        Calendar integration coming soon
      </Text>
      <Text marginTop="$2" color="$gray10" textAlign="center">
        This tab will display task and habit schedules in a calendar view
      </Text>
    </YStack>
  );
}


[EOF: app/(tabs)/planner/index.tsx]

========================================
FILE: app/(tabs)/planner/_layout.tsx
ISSUE CONTEXT: Navigation structure for planner tab
----------------------------------------

// File: /Users/tylerbedford/Documents/Coding Projects/AetherIphone/app/(tabs)/planner/_layout.tsx
import { Stack } from 'expo-router';
import React from 'react';

export default function PlannerLayout() {
  return (
    <Stack screenOptions={{ headerShown: false }}>
      {/* The index screen is the default for the planner tab */}
      <Stack.Screen name="index" />
      {/* Add screens for the sub-pages */}
      <Stack.Screen name="add-task" options={{ presentation: 'modal', title: 'Add Task' }} />
      <Stack.Screen name="add-habit" options={{ presentation: 'modal', title: 'Add Habit' }} />
      <Stack.Screen name="add-goal" options={{ presentation: 'modal', title: 'Add Goal' }} />
      <Stack.Screen name="goal/[id]" options={{ title: 'Goal Details' }} />
      <Stack.Screen name="habit/[id]" options={{ title: 'Habit Details' }} />
    </Stack>
  );
}


[EOF: app/(tabs)/planner/_layout.tsx]

========================================
FILE: app/(tabs)/settings/_layout.tsx
ISSUE CONTEXT: Navigation structure for settings tab
----------------------------------------

// File: /Users/tylerbedford/Documents/Coding Projects/AetherIphone/app/(tabs)/settings/_layout.tsx
import { Stack } from 'expo-router';
import React from 'react';

export default function SettingsLayout() {
  return (
    <Stack screenOptions={{ headerShown: false }}>
      {/* The index screen is the default for the settings tab */}
      <Stack.Screen name="index" />
      {/* Add screens for the sub-pages */}
      <Stack.Screen name="profile" options={{ title: 'Edit Profile' }} />
      <Stack.Screen name="security" options={{ title: 'Security' }} />
      <Stack.Screen name="privacy" options={{ title: 'Data & Privacy' }} />
      <Stack.Screen name="notifications" options={{ title: 'Notifications' }} />
      <Stack.Screen name="help" options={{ title: 'Help & Support' }} />
      <Stack.Screen name="about" options={{ title: 'About Aether' }} />
    </Stack>
  );
}


[EOF: app/(tabs)/settings/_layout.tsx]


========================================
ERROR ANALYSIS AND RECOMMENDATIONS
----------------------------------------


Okay, let's break down the issues from the debug report and identify which other files would be helpful.

**1. Issue: `TypeError: principles.map is not a function` (in `PrinciplesTab.tsx`)**

* **Explanation:** As the report context suggests, this error happens because the `principles` variable (coming from the `trpc.value.getValues` query) is `undefined` when the `.map()` function tries to run. This occurs during the initial loading state or if the query returns an error.
* **Code Provided:** `app/(tabs)/compass/index.tsx` shows how `PrinciplesTab` is rendered, but not the internal code of `PrinciplesTab` itself.
* **IMPORTANT NOTE: The `components/compass/PrinciplesTab.tsx` file was NOT FOUND by the script.** This suggests either:
  1. The file is in a different location
  2. The component might be defined inline in another file
  3. The file might have a different name
* **Files Needed for Fix:**
  * **`components/compass/PrinciplesTab.tsx`**: This file is essential but missing. We need its content to see exactly how `principles` is being accessed and add the necessary checks (`if (isLoading)...`, `if (error)...`, `if (!principles || !Array.isArray(principles))...`) before the `.map()` call.

**2. Issue: Duplicate Key Warning (`.$undefined-grid=2undefined-grid`) in `RewardsScreen`**

* **Explanation:** The `FlatList` in `app/(tabs)/rewards/index.tsx` uses a `keyExtractor` function that combines `item.id` with `viewMode`. The generated key `.$undefined-grid=2undefined-grid` indicates that for at least one item in the `rewards` array (when `viewMode` is 'grid'), `item.id` is coming through as `undefined`. React requires unique string keys for list items.
* **Code Provided:** `app/(tabs)/rewards/index.tsx` shows the `FlatList` setup.
* **Analysis of Server Code:** If `server/src/routers/rewardsRouter.ts` was found, it should be checked to see if the `getAvailableRewards` procedure correctly selects the `id` field. If the router code looks okay, the issue might be in the database data itself.
* **Next Step:** Log the `rewards` data inside the `RewardsScreen` component right before the `FlatList` is rendered to find which item(s) are missing the `id`:
  ```javascript
  // Inside RewardsScreen component
  console.log("Rewards Data:", JSON.stringify(rewards, null, 2)); // Log before FlatList
  ```
* **Files Needed for Fix:**
  * **`server/src/routers/rewardsRouter.ts`**: To check the `getAvailableRewards` procedure.

**3. Issue: Routing Warnings (`No route named planner/index & settings/index exists...`)**

* **Explanation:** The provided code for `app/(tabs)/_layout.tsx` *does* use the correct naming (`name="planner/index"`, `name="settings/index"`). This should resolve the specific warnings mentioned in the logs.
* **Possible Reasons for Persisting Warnings:**
  * The running app might not have fully reflected the code change yet (clear cache, restart Metro with `npx expo start -c`).
  * There might be *other* places in the code (like `Link` components or `router.push` calls) that are still using old, incorrect short names.
  * The issue might be deeper within Expo Router's handling of nested layouts.
* **Action:** Confirm if the warnings specifically for `planner/index` and `settings/index` are still showing up *after* applying the fix and restarting/clearing cache. If so, search for `Link` or `router.push` calls that might still use short names.

**4. Issue: `ReferenceError: Property "ScrollView" doesn't exist` (in `PlannerScreen`)**

* **Explanation:** The code in `app/(tabs)/planner/index.tsx` uses the `<ScrollView>` component, but it's missing the corresponding import statement.
* **Code Provided:** `app/(tabs)/planner/index.tsx` shows the usage without the import.
* **✅ Fix:** Add the import to `app/(tabs)/planner/index.tsx`:
  ```javascript
  import { YStack, XStack, Text, Tabs, Button, Spinner, Card, ScrollView } from 'tamagui'; // Add ScrollView here
  // or if you intended the React Native one:
  // import { ScrollView } from 'react-native'; 
  ```

**Hypothesis Summary:**

* The `PrinciplesTab` error is likely the same "accessing undefined data before load/error check" issue seen previously, but **we couldn't find the actual file to confirm**.
* The `RewardsScreen` duplicate key error suggests inconsistent data (missing `id`s) coming from the `rewards.getAvailableRewards` tRPC call. Data inspection is needed.
* The `PlannerScreen` `ScrollView` error is a simple missing import - easy to fix.

For a more complete analysis, we would need to locate the missing `PrinciplesTab.tsx` file, possibly by checking other component directories, and also examine the data flowing through the `RewardsScreen` component.
